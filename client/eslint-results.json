[{"filePath":"D:\\Trainer-Timetable-App\\client\\src\\12ga.js","messages":[{"ruleId":"react/prop-types","severity":2,"message":"'isOpen' is missing in props validation","line":15,"column":25,"nodeType":"Property","messageId":"missingPropType","endLine":15,"endColumn":31},{"ruleId":"react/prop-types","severity":2,"message":"'onClose' is missing in props validation","line":15,"column":33,"nodeType":"Property","messageId":"missingPropType","endLine":15,"endColumn":40},{"ruleId":"react/prop-types","severity":2,"message":"'onSave' is missing in props validation","line":15,"column":42,"nodeType":"Property","messageId":"missingPropType","endLine":15,"endColumn":48},{"ruleId":"react/prop-types","severity":2,"message":"'sessionData' is missing in props validation","line":15,"column":50,"nodeType":"Property","messageId":"missingPropType","endLine":15,"endColumn":61},{"ruleId":"react/prop-types","severity":2,"message":"'trainers' is missing in props validation","line":15,"column":63,"nodeType":"Property","messageId":"missingPropType","endLine":15,"endColumn":71},{"ruleId":"react/prop-types","severity":2,"message":"'trainers.map' is missing in props validation","line":77,"column":39,"nodeType":"Identifier","messageId":"missingPropType","endLine":77,"endColumn":42},{"ruleId":"react/prop-types","severity":2,"message":"'user' is missing in props validation","line":152,"column":27,"nodeType":"Property","messageId":"missingPropType","endLine":152,"endColumn":31},{"ruleId":"react/prop-types","severity":2,"message":"'onLogout' is missing in props validation","line":152,"column":33,"nodeType":"Property","messageId":"missingPropType","endLine":152,"endColumn":41},{"ruleId":"no-unused-vars","severity":2,"message":"'handleDeleteSession' is assigned a value but never used.","line":256,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":256,"endColumn":30},{"ruleId":"react/prop-types","severity":2,"message":"'user.email' is missing in props validation","line":302,"column":83,"nodeType":"Identifier","messageId":"missingPropType","endLine":302,"endColumn":88},{"ruleId":"react/prop-types","severity":2,"message":"'user.id' is missing in props validation","line":303,"column":60,"nodeType":"Identifier","messageId":"missingPropType","endLine":303,"endColumn":62},{"ruleId":"react/prop-types","severity":2,"message":"'user.role' is missing in props validation","line":303,"column":78,"nodeType":"Identifier","messageId":"missingPropType","endLine":303,"endColumn":82}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// client/src/AdminDashboard.js\r\n// IMPORTANT: To resolve \"Could not resolve\" errors for FullCalendar,\r\n// ensure you have installed all FullCalendar packages in your client directory:\r\n// npm install @fullcalendar/react @fullcalendar/daygrid @fullcalendar/timegrid @fullcalendar/list\r\n// After installation, restart your frontend development server (npm start).\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\nimport listPlugin from '@fullcalendar/list';\r\nimport FullCalendar from '@fullcalendar/react';\r\n\r\n// Modal for Add/Edit Session\r\nfunction SessionModal({ isOpen, onClose, onSave, sessionData, trainers }) {\r\n    const [formData, setFormData] = useState(sessionData || {\r\n        trainer_id: '',\r\n        course_name: '',\r\n        date: '',\r\n        time: '',\r\n        location: ''\r\n    });\r\n    const [formError, setFormError] = useState('');\r\n\r\n    useEffect(() => {\r\n        // Update form data if sessionData changes (for edit mode)\r\n        if (sessionData) {\r\n            setFormData(sessionData);\r\n        } else {\r\n            // Reset for add mode\r\n            setFormData({\r\n                trainer_id: '',\r\n                course_name: '',\r\n                date: '',\r\n                time: '',\r\n                location: ''\r\n            });\r\n        }\r\n        setFormError(''); // Clear errors on modal open/data change\r\n    }, [sessionData, isOpen]);\r\n\r\n    if (!isOpen) return null;\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData(prev => ({ ...prev, [name]: value }));\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        setFormError('');\r\n        // Basic validation\r\n        if (!formData.trainer_id || !formData.course_name || !formData.date || !formData.time || !formData.location) {\r\n            setFormError('All fields are required.');\r\n            return;\r\n        }\r\n        onSave(formData);\r\n    };\r\n\r\n    return (\r\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n            <div className=\"bg-white rounded-lg shadow-xl p-6 w-full max-w-md\">\r\n                <h2 className=\"text-2xl font-bold text-gray-800 mb-4\">{sessionData ? 'Edit Session' : 'Add Session'}</h2>\r\n                {formError && <p className=\"text-red-600 text-sm mb-4\">{formError}</p>}\r\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n                    <div>\r\n                        <label htmlFor=\"trainer_id\" className=\"block text-sm font-medium text-gray-700\">Trainer</label>\r\n                        <select\r\n                            id=\"trainer_id\"\r\n                            name=\"trainer_id\"\r\n                            value={formData.trainer_id}\r\n                            onChange={handleChange}\r\n                            className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\r\n                            required\r\n                        >\r\n                            <option value=\"\">Select Trainer</option>\r\n                            {trainers.map(trainer => (\r\n                                <option key={trainer.id} value={trainer.id}>{trainer.email}</option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"course_name\" className=\"block text-sm font-medium text-gray-700\">Course Name</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"course_name\"\r\n                            name=\"course_name\"\r\n                            value={formData.course_name}\r\n                            onChange={handleChange}\r\n                            className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"date\" className=\"block text-sm font-medium text-gray-700\">Date</label>\r\n                        <input\r\n                            type=\"date\"\r\n                            id=\"date\"\r\n                            name=\"date\"\r\n                            value={formData.date}\r\n                            onChange={handleChange}\r\n                            className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"time\" className=\"block text-sm font-medium text-gray-700\">Time</label>\r\n                        <input\r\n                            type=\"time\"\r\n                            id=\"time\"\r\n                            name=\"time\"\r\n                            value={formData.time}\r\n                            onChange={handleChange}\r\n                            className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"location\" className=\"block text-sm font-medium text-gray-700\">Location</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"location\"\r\n                            name=\"location\"\r\n                            value={formData.location}\r\n                            onChange={handleChange}\r\n                            className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className=\"flex justify-end space-x-3 mt-6\">\r\n                        <button\r\n                            type=\"button\"\r\n                            onClick={onClose}\r\n                            className=\"px-4 py-2 bg-gray-300 text-gray-800 rounded-md hover:bg-gray-400 transition duration-200\"\r\n                        >\r\n                            Cancel\r\n                        </button>\r\n                        <button\r\n                            type=\"submit\"\r\n                            className=\"px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition duration-200\"\r\n                        >\r\n                            Save Session\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nfunction AdminDashboard({ user, onLogout }) {\r\n    const [events, setEvents] = useState([]);\r\n    const [trainers, setTrainers] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [notification, setNotification] = useState('');\r\n\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [currentSession, setCurrentSession] = useState(null); // For editing\r\n\r\n    // Function to fetch all sessions and trainers\r\n    const fetchAllData = async () => {\r\n        setLoading(true);\r\n        setError(null);\r\n        try {\r\n            const token = localStorage.getItem('token');\r\n            if (!token) {\r\n                setError('No authentication token found.');\r\n                setLoading(false);\r\n                return;\r\n            }\r\n\r\n            // Fetch sessions\r\n            const sessionsResponse = await axios.get('http://localhost:5000/api/sessions', {\r\n                headers: { Authorization: `Bearer ${token}` },\r\n            });\r\n\r\n            // Fetch trainers\r\n            const trainersResponse = await axios.get('http://localhost:5000/api/users/trainers', {\r\n                headers: { Authorization: `Bearer ${token}` },\r\n            });\r\n            setTrainers(trainersResponse.data);\r\n\r\n            // Map events for FullCalendar\r\n            const mappedEvents = sessionsResponse.data.map(session => ({\r\n                id: session.id,\r\n                title: `${session.course_name} - ${session.location} (Trainer: ${session.trainer_email || 'N/A'})`,\r\n                date: session.date,\r\n                startTime: session.time,\r\n                extendedProps: {\r\n                    location: session.location,\r\n                    trainerId: session.trainer_id,\r\n                    courseName: session.course_name,\r\n                    trainerEmail: session.trainer_email // For display in modal/details\r\n                },\r\n                color: getColorForTrainer(session.trainer_id), // Assign color based on trainer\r\n                // Highlight today's events\r\n                classNames: new Date(session.date).toDateString() === new Date().toDateString() ? ['bg-purple-500', 'text-white', 'font-bold'] : [],\r\n            }));\r\n            setEvents(mappedEvents);\r\n\r\n            // Check for upcoming sessions in the next 24 hours\r\n            const now = new Date();\r\n            const next24Hours = new Date(now.getTime() + 24 * 60 * 60 * 1000);\r\n            const upcoming = sessionsResponse.data.filter(session => {\r\n                const sessionDateTime = new Date(`${session.date}T${session.time}`);\r\n                return sessionDateTime > now && sessionDateTime <= next24Hours;\r\n            });\r\n\r\n            if (upcoming.length > 0) {\r\n                const upcomingTitles = upcoming.map(s => `${s.course_name} at ${s.time} by ${s.trainer_email}`).join(', ');\r\n                setNotification(`Upcoming sessions in next 24 hrs: ${upcomingTitles}`);\r\n            } else {\r\n                setNotification('No upcoming sessions in the next 24 hours.');\r\n            }\r\n\r\n        } catch (err) {\r\n            console.error('Error fetching data for admin dashboard:', err);\r\n            setError('Failed to load data. Please ensure backend is running and you have admin privileges.');\r\n            setNotification('Failed to load upcoming session notifications.');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchAllData();\r\n    }, [user]); // Refetch when user changes\r\n\r\n    // Simple color assignment based on trainer ID\r\n    const getColorForTrainer = (trainerId) => {\r\n        const colors = ['#3f51b5', '#e91e63', '#009688', '#ff9800', '#673ab7', '#8bc34a']; // Sample colors\r\n        return colors[trainerId % colors.length]; // Cycle through colors\r\n    };\r\n\r\n    const handleAddSessionClick = () => {\r\n        setCurrentSession(null); // Clear any existing session data\r\n        setIsModalOpen(true);\r\n    };\r\n\r\n    const handleEditSession = (info) => {\r\n        // info.event.extendedProps contains our custom data\r\n        const sessionToEdit = {\r\n            id: info.event.id,\r\n            trainer_id: info.event.extendedProps.trainerId,\r\n            course_name: info.event.extendedProps.courseName,\r\n            date: info.event.startStr.split('T')[0], // Extract YYYY-MM-DD\r\n            time: info.event.extendedProps.startTime,\r\n            location: info.event.extendedProps.location\r\n        };\r\n        setCurrentSession(sessionToEdit);\r\n        setIsModalOpen(true);\r\n    };\r\n\r\n    const handleDeleteSession = async (info) => {\r\n        if (window.confirm(`Are you sure you want to delete session \"${info.event.title}\"?`)) {\r\n            try {\r\n                const token = localStorage.getItem('token');\r\n                await axios.delete(`http://localhost:5000/api/sessions/${info.event.id}`, {\r\n                    headers: { Authorization: `Bearer ${token}` },\r\n                });\r\n                alert('Session deleted successfully!');\r\n                fetchAllData(); // Refresh calendar\r\n            } catch (err) {\r\n                console.error('Error deleting session:', err);\r\n                alert('Failed to delete session. Check console for details.');\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleSaveSession = async (data) => {\r\n        try {\r\n            const token = localStorage.getItem('token');\r\n            if (data.id) {\r\n                // Edit existing session\r\n                await axios.put(`http://localhost:5000/api/sessions/${data.id}`, data, {\r\n                    headers: { Authorization: `Bearer ${token}` },\r\n                });\r\n                alert('Session updated successfully!');\r\n            } else {\r\n                // Add new session\r\n                await axios.post('http://localhost:5000/api/sessions', data, {\r\n                    headers: { Authorization: `Bearer ${token}` },\r\n                });\r\n                alert('Session added successfully!');\r\n            }\r\n            setIsModalOpen(false);\r\n            fetchAllData(); // Refresh calendar\r\n        } catch (err) {\r\n            console.error('Error saving session:', err);\r\n            alert('Failed to save session. Check console for details.');\r\n        }\r\n    };\r\n\r\n    if (loading) return <div className=\"min-h-screen flex items-center justify-center bg-gray-100\"><p className=\"text-gray-700 text-lg\">Loading data...</p></div>;\r\n    if (error) return <div className=\"min-h-screen flex items-center justify-center bg-red-100\"><p className=\"text-red-700 text-lg\">{error}</p></div>;\r\n\r\n    return (\r\n        <div className=\"min-h-screen bg-gradient-to-br from-purple-500 to-pink-600 text-white p-6 flex flex-col items-center\">\r\n            <div className=\"bg-white text-gray-800 p-8 rounded-xl shadow-lg w-full max-w-4xl text-center mb-8\">\r\n                <h2 className=\"text-4xl font-extrabold mb-4\">Welcome, Admin {user.email}!</h2>\r\n                <p className=\"text-lg mb-4\">Your ID: {user.id} | Role: {user.role}</p>\r\n                <button\r\n                    onClick={onLogout}\r\n                    className=\"bg-red-500 text-white py-2 px-6 rounded-lg hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-400 focus:ring-offset-2 transition duration-200\"\r\n                >\r\n                    Logout\r\n                </button>\r\n            </div>\r\n\r\n            {notification && (\r\n                <div className=\"bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 rounded-lg shadow-md w-full max-w-4xl mb-6\" role=\"alert\">\r\n                    <p className=\"font-bold\">Notification:</p>\r\n                    <p>{notification}</p>\r\n                </div>\r\n            )}\r\n\r\n            <div className=\"bg-white p-8 rounded-xl shadow-lg w-full max-w-4xl\">\r\n                <h3 className=\"text-2xl font-bold text-gray-800 mb-4\">All Trainer Timetables</h3>\r\n                <div className=\"mb-4 flex justify-end\">\r\n                    <button\r\n                        onClick={handleAddSessionClick}\r\n                        className=\"bg-indigo-600 text-white py-2 px-4 rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition duration-200\"\r\n                    >\r\n                        Add New Session\r\n                    </button>\r\n                </div>\r\n                <FullCalendar\r\n                    plugins={[dayGridPlugin, timeGridPlugin, listPlugin]}\r\n                    initialView=\"dayGridMonth\"\r\n                    events={events}\r\n                    headerToolbar={{\r\n                        left: 'prev,next today',\r\n                        center: 'title',\r\n                        right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'\r\n                    }}\r\n                    editable={true} // Allow dragging and resizing events\r\n                    selectable={true} // Allow selecting dates for new events\r\n                    eventClick={handleEditSession} // Handle click for edit/delete\r\n                    eventDrop={handleEditSession} // Handle event drag-and-drop (updates date/time)\r\n                    eventResize={handleEditSession} // Handle event resizing (updates duration)\r\n                    height=\"auto\"\r\n                />\r\n            </div>\r\n\r\n            {/* Session Add/Edit Modal */}\r\n            <SessionModal\r\n                isOpen={isModalOpen}\r\n                onClose={() => setIsModalOpen(false)}\r\n                onSave={handleSaveSession}\r\n                sessionData={currentSession}\r\n                trainers={trainers}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AdminDashboard;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Trainer-Timetable-App\\client\\src\\AdminDashboard.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'dayGridPlugin' is defined but never used.","line":4,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'timeGridPlugin' is defined but never used.","line":5,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'listPlugin' is defined but never used.","line":6,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'FullCalendar' is defined but never used.","line":7,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":20},{"ruleId":"react/prop-types","severity":2,"message":"'isOpen' is missing in props validation","line":25,"column":25,"nodeType":"Property","messageId":"missingPropType","endLine":25,"endColumn":31},{"ruleId":"react/prop-types","severity":2,"message":"'onClose' is missing in props validation","line":25,"column":33,"nodeType":"Property","messageId":"missingPropType","endLine":25,"endColumn":40},{"ruleId":"react/prop-types","severity":2,"message":"'onSave' is missing in props validation","line":25,"column":42,"nodeType":"Property","messageId":"missingPropType","endLine":25,"endColumn":48},{"ruleId":"react/prop-types","severity":2,"message":"'sessionData' is missing in props validation","line":25,"column":50,"nodeType":"Property","messageId":"missingPropType","endLine":25,"endColumn":61},{"ruleId":"react/prop-types","severity":2,"message":"'trainers' is missing in props validation","line":25,"column":63,"nodeType":"Property","messageId":"missingPropType","endLine":25,"endColumn":71},{"ruleId":"react/prop-types","severity":2,"message":"'trainers.map' is missing in props validation","line":61,"column":23,"nodeType":"Identifier","messageId":"missingPropType","endLine":61,"endColumn":26},{"ruleId":"react/prop-types","severity":2,"message":"'isOpen' is missing in props validation","line":86,"column":22,"nodeType":"Property","messageId":"missingPropType","endLine":86,"endColumn":28},{"ruleId":"react/prop-types","severity":2,"message":"'onClose' is missing in props validation","line":86,"column":30,"nodeType":"Property","messageId":"missingPropType","endLine":86,"endColumn":37},{"ruleId":"react/prop-types","severity":2,"message":"'onSave' is missing in props validation","line":86,"column":39,"nodeType":"Property","messageId":"missingPropType","endLine":86,"endColumn":45},{"ruleId":"react/prop-types","severity":2,"message":"'userData' is missing in props validation","line":86,"column":47,"nodeType":"Property","messageId":"missingPropType","endLine":86,"endColumn":55},{"ruleId":"react/prop-types","severity":2,"message":"'user' is missing in props validation","line":140,"column":27,"nodeType":"Property","messageId":"missingPropType","endLine":140,"endColumn":31},{"ruleId":"react/prop-types","severity":2,"message":"'onLogout' is missing in props validation","line":140,"column":33,"nodeType":"Property","messageId":"missingPropType","endLine":140,"endColumn":41},{"ruleId":"react/prop-types","severity":2,"message":"'user.role' is missing in props validation","line":177,"column":14,"nodeType":"Identifier","messageId":"missingPropType","endLine":177,"endColumn":18},{"ruleId":"react/prop-types","severity":2,"message":"'user.email' is missing in props validation","line":374,"column":222,"nodeType":"Identifier","messageId":"missingPropType","endLine":374,"endColumn":227},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":384,"column":195,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[16664,16680],"text":"Today&apos;s Sessions"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[16664,16680],"text":"Today&lsquo;s Sessions"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[16664,16680],"text":"Today&#39;s Sessions"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[16664,16680],"text":"Today&rsquo;s Sessions"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'event' is defined but never used.","line":572,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":572,"endColumn":35}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// client/src/AdminDashboard.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport listPlugin from '@fullcalendar/list';\nimport FullCalendar from '@fullcalendar/react';\nimport { saveAs } from 'file-saver';\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\nimport ReactPaginate from 'react-paginate';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Papa from 'papaparse';\nimport TrainerUtilization from './TrainerUtilization';\nimport Modal from 'react-modal';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport * as XLSX from 'xlsx';\n\nimport './styles/calendarStyles.css';\nimport './styles/dashboardStyles.css';\n\nfunction SessionModal({ isOpen, onClose, onSave, sessionData, trainers }) {\n  const [formData, setFormData] = useState(sessionData || {\n    trainer_id: '', course_name: '', date: '', time: '', location: '', duration: '', attended: false, emailNotify: true\n  });\n\n  useEffect(() => {\n    if (sessionData) {\n      setFormData(sessionData);\n    } else {\n      setFormData({ trainer_id: '', course_name: '', date: '', time: '', location: '', duration: '', attended: false, emailNotify: true });\n    }\n  }, [sessionData, isOpen]);\n\n  if (!isOpen) return null;\n\n  const handleChange = e => {\n    const { name, value, type, checked } = e.target;\n    setFormData(prev => ({ ...prev, [name]: type === 'checkbox' ? checked : value }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!formData.duration || isNaN(formData.duration) || formData.duration <= 0) {\n      toast.error('Please enter a valid session duration.');\n      return;\n    }\n    onSave(formData);\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50\">\n      <div className=\"bg-white p-6 rounded shadow-lg w-full max-w-md\">\n        <h2 className=\"text-xl font-bold mb-4\">{sessionData ? 'Edit Session' : 'Add Session'}</h2>\n        <form onSubmit={handleSubmit} className=\"space-y-3\">\n          <select name=\"trainer_id\" value={formData.trainer_id} onChange={handleChange} className=\"w-full border p-2 rounded\">\n            <option value=\"\">Select Trainer</option>\n            {trainers.map(t => <option key={t.id} value={t.id}>{t.email}</option>)}\n          </select>\n          <input name=\"course_name\" value={formData.course_name} onChange={handleChange} placeholder=\"Course Name\" className=\"w-full border p-2 rounded\" />\n          <input type=\"date\" name=\"date\" value={formData.date} onChange={handleChange} className=\"w-full border p-2 rounded\" />\n          <input type=\"time\" name=\"time\" value={formData.time} onChange={handleChange} className=\"w-full border p-2 rounded\" />\n          <input name=\"location\" value={formData.location} onChange={handleChange} placeholder=\"Location\" className=\"w-full border p-2 rounded\" />\n          <input name=\"duration\" type=\"number\" min=\"1\" placeholder=\"Duration (minutes)\" value={formData.duration} onChange={handleChange} className=\"w-full border p-2 rounded\" />\n          <label className=\"inline-flex items-center\">\n            <input type=\"checkbox\" name=\"attended\" checked={formData.attended} onChange={handleChange} className=\"mr-2\" />\n            Mark as Attended\n          </label>\n          <label className=\"inline-flex items-center\">\n            <input type=\"checkbox\" name=\"emailNotify\" checked={formData.emailNotify} onChange={handleChange} className=\"mr-2\" />\n            Send Email Notification\n          </label>\n          <div className=\"flex justify-end gap-2\">\n            <button type=\"button\" onClick={onClose} className=\"bg-gray-300 px-4 py-2 rounded\">Cancel</button>\n            <button type=\"submit\" className=\"bg-indigo-500 text-white px-4 py-2 rounded\">Save</button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nfunction UserModal({ isOpen, onClose, onSave, userData }) {\n  const [form, setForm] = useState(userData || { name: '', email: '', password: '', role: 'trainer' });\n  useEffect(() => { setForm(userData || { name: '', email: '', password: '', role: 'trainer' }); }, [userData, isOpen]);\n  if (!isOpen) return null;\n  const handleChange = e => { const { name, value } = e.target; setForm(f => ({ ...f, [name]: value })); };\n  const handleSubmit = e => { e.preventDefault(); onSave(form); };\n  return (\n    <Modal isOpen={isOpen} onRequestClose={onClose} ariaHideApp={false} className=\"modal\" overlayClassName=\"modal-overlay\">\n      <h2 className=\"text-xl font-bold mb-4\">{userData ? 'Edit User' : 'Add User'}</h2>\n      <form onSubmit={handleSubmit} className=\"space-y-3\">\n        <input name=\"name\" value={form.name} onChange={handleChange} placeholder=\"Name\" className=\"w-full border p-2 rounded\" required />\n        <input name=\"email\" value={form.email} onChange={handleChange} placeholder=\"Email\" className=\"w-full border p-2 rounded\" required type=\"email\" />\n        <input name=\"password\" value={form.password} onChange={handleChange} placeholder=\"Password\" className=\"w-full border p-2 rounded\" type=\"password\" minLength={userData ? 0 : 6} />\n        <select name=\"role\" value={form.role} onChange={handleChange} className=\"w-full border p-2 rounded\">\n          <option value=\"trainer\">Trainer</option>\n          <option value=\"admin\">Admin</option>\n        </select>\n        <div className=\"flex justify-end gap-2\">\n          <button type=\"button\" onClick={onClose} className=\"bg-gray-300 px-4 py-2 rounded\">Cancel</button>\n          <button type=\"submit\" className=\"bg-indigo-500 text-white px-4 py-2 rounded\">Save</button>\n        </div>\n      </form>\n    </Modal>\n  );\n}\n\nfunction sendEmailNotification(session) {\n  const token = localStorage.getItem('token');\n  axios.post('/api/notifications/email', {\n    subject: 'New Session Scheduled',\n    message: `You have a new session: ${session.course_name} on ${session.date} at ${session.time}`,\n    recipient: session.trainer_email\n  }, {\n    headers: { Authorization: `Bearer ${token}` }\n  }).then(() => {\n    toast.success('Email notification sent');\n  }).catch(() => {\n    toast.error('Failed to send email');\n  });\n}\n\nfunction getTodayAndUpcomingSessions(sessions) {\n  const today = new Date();\n  const todayStr = today.toISOString().slice(0, 10);\n  const upcomingLimit = new Date(today);\n  upcomingLimit.setDate(today.getDate() + 7);\n  const todaySessions = sessions.filter(s => s.date === todayStr);\n  const upcomingSessions = sessions.filter(s => {\n    const d = new Date(s.date);\n    return d > today && d <= upcomingLimit;\n  });\n  return { todaySessions, upcomingSessions };\n}\n\nfunction AdminDashboard({ user, onLogout }) {\n  const [sessions, setSessions] = useState([]);\n  const [trainers, setTrainers] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [editingSession, setEditingSession] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [userModalOpen, setUserModalOpen] = useState(false);\n  const [editingUser, setEditingUser] = useState(null);\n  const itemsPerPage = 10;\n  const [calendarEvents, setCalendarEvents] = useState([]);\n  const [calendarSource, setCalendarSource] = useState('backend'); // 'backend' or 'excel'\n  const [excelFileName, setExcelFileName] = useState('');\n  const localizer = momentLocalizer(moment);\n  const [notifications, setNotifications] = useState([]);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (calendarSource === 'backend') {\n      setCalendarEvents(sessions.map(session => ({\n        id: session.id,\n        title: `${session.course_name} (${session.location}) - ${trainers.find(t => t.id === session.trainer_id)?.email || 'Unknown'}`,\n        start: new Date(`${session.date}T${session.time}`),\n        end: new Date(new Date(`${session.date}T${session.time}`).getTime() + ((session.duration || 60) * 60000)),\n        allDay: false,\n        resource: session\n      })));\n    }\n  }, [sessions, trainers, calendarSource]);\n\n  // Fetch notifications for admin\n  useEffect(() => {\n    if (user.role === 'admin') {\n      const fetchNotifications = async () => {\n        try {\n          const token = localStorage.getItem('token');\n          const res = await axios.get('/api/notifications', { headers: { Authorization: `Bearer ${token}` } });\n          setNotifications(res.data);\n        } catch (err) {\n          // ignore\n        }\n      };\n      fetchNotifications();\n    }\n  }, [user]);\n\n  const handleExcelUpload = (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    setExcelFileName(file.name);\n    const reader = new FileReader();\n    reader.onload = (evt) => {\n      const data = new Uint8Array(evt.target.result);\n      const workbook = XLSX.read(data, { type: 'array' });\n      const sheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[sheetName];\n      const json = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n      // Assume first row is header\n      const header = json[0];\n      const rows = json.slice(1);\n      // Map Excel columns to event fields\n      const events = rows.map((row, idx) => {\n        const get = (col) => row[header.indexOf(col)] || '';\n        const date = get('Date') || get('Session Date') || get('session_date') || get('date');\n        const time = get('Time') || get('Session Time') || get('session_time') || get('time') || '09:00';\n        const duration = parseInt(get('Duration') || 60);\n        return {\n          id: idx + 10000, // avoid collision with backend ids\n          title: `${get('Course') || get('Course Name') || get('course_name')} (${get('Location') || get('location')}) - ${get('Trainer') || get('trainer_email')}`,\n          start: new Date(`${date}T${time}`),\n          end: new Date(new Date(`${date}T${time}`).getTime() + (duration * 60000)),\n          allDay: false,\n          resource: row\n        };\n      });\n      setCalendarEvents(events);\n      setCalendarSource('excel');\n    };\n    reader.readAsArrayBuffer(file);\n  };\n\n  const handleCalendarSourceChange = (src) => {\n    setCalendarSource(src);\n    if (src === 'backend') setExcelFileName('');\n  };\n\n  const fetchData = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const [sessionsRes, trainersRes, usersRes] = await Promise.all([\n        axios.get('/api/sessions', { headers: { Authorization: `Bearer ${token}` } }),\n        axios.get('/api/users', { headers: { Authorization: `Bearer ${token}` } }),\n        axios.get('/api/users', { headers: { Authorization: `Bearer ${token}` } })\n      ]);\n      setSessions(sessionsRes.data);\n      setTrainers(trainersRes.data.filter(t => t.role === 'trainer'));\n      setUsers(usersRes.data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      toast.error('Failed to load data');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSaveSession = async (sessionData) => {\n    try {\n      const token = localStorage.getItem('token');\n      if (editingSession) {\n        await axios.put(`/api/sessions/${editingSession.id}`, sessionData, {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        toast.success('Session updated successfully');\n      } else {\n        await axios.post('/api/sessions', sessionData, {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        toast.success('Session created successfully');\n      }\n      setModalOpen(false);\n      setEditingSession(null);\n      fetchData();\n    } catch (error) {\n      console.error('Error saving session:', error);\n      toast.error('Failed to save session');\n    }\n  };\n\n  const handleDeleteSession = async (sessionId) => {\n    if (!window.confirm('Are you sure you want to delete this session?')) return;\n    \n    try {\n      const token = localStorage.getItem('token');\n      await axios.delete(`/api/sessions/${sessionId}`, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      toast.success('Session deleted successfully');\n      fetchData();\n    } catch (error) {\n      console.error('Error deleting session:', error);\n      toast.error('Failed to delete session');\n    }\n  };\n\n  const exportCSV = () => {\n    const csv = Papa.unparse(sessions.map(s => ({\n      Course: s.course_name,\n      Date: s.date,\n      Time: s.time,\n      Location: s.location,\n      Trainer: trainers.find(t => t.id === s.trainer_id)?.email || 'Unknown',\n      Attended: s.attended ? 'Yes' : 'No'\n    })));\n    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n    saveAs(blob, 'admin_sessions.csv');\n  };\n\n  const exportPDF = () => {\n    const doc = new jsPDF();\n    doc.text('Admin Sessions Report', 14, 16);\n    doc.autoTable({\n      startY: 20,\n      head: [['Course', 'Date', 'Time', 'Location', 'Trainer', 'Attended']],\n      body: sessions.map(s => [\n        s.course_name,\n        s.date,\n        s.time,\n        s.location,\n        trainers.find(t => t.id === s.trainer_id)?.email || 'Unknown',\n        s.attended ? 'Yes' : 'No'\n      ])\n    });\n    doc.save('admin_sessions.pdf');\n  };\n\n  const handleSaveUser = async (form) => {\n    try {\n      const token = localStorage.getItem('token');\n      if (editingUser) {\n        await axios.put(`/api/users/${editingUser.id}`, form, { headers: { Authorization: `Bearer ${token}` } });\n        toast.success('User updated successfully');\n      } else {\n        await axios.post('/api/users', form, { headers: { Authorization: `Bearer ${token}` } });\n        toast.success('User created successfully');\n      }\n      setUserModalOpen(false);\n      setEditingUser(null);\n      fetchData();\n    } catch (error) {\n      console.error('Error saving user:', error);\n      toast.error('Failed to save user');\n    }\n  };\n\n  const handleDeleteUser = async (userId) => {\n    if (!window.confirm('Are you sure you want to delete this user?')) return;\n    try {\n      const token = localStorage.getItem('token');\n      await axios.delete(`/api/users/${userId}`, { headers: { Authorization: `Bearer ${token}` } });\n      toast.success('User deleted successfully');\n      fetchData();\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      toast.error('Failed to delete user');\n    }\n  };\n\n  const filteredSessions = sessions.filter(session =>\n    session.course_name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    session.location.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const paginatedSessions = filteredSessions.slice(\n    (currentPage - 1) * itemsPerPage,\n    currentPage * itemsPerPage\n  );\n\n  const { todaySessions, upcomingSessions } = getTodayAndUpcomingSessions(filteredSessions);\n\n  if (loading) return <div className=\"text-center p-4\">Loading...</div>;\n\n  return (\n    <div className=\"dashboard-bg\">\n      <div className=\"dashboard-container\">\n        <ToastContainer />\n        {/* 50x Modern UI: Animated glassmorphism cards, beautiful gradients, elegant badges */}\n        <div className=\"dashboard-card\" style={{ background: 'rgba(255,255,255,0.85)', boxShadow: '0 8px 32px 0 rgba(80,112,255,0.18)', border: '2px solid #a5b4fc', marginBottom: 32, animation: 'fadeInUp 0.8s cubic-bezier(0.23, 1, 0.32, 1)' }}>\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', gap: 32 }}>\n            <div>\n              <h2 className=\"dashboard-header\" style={{ fontSize: '2.7rem', background: 'linear-gradient(90deg,#6366f1 0%,#a5b4fc 100%)', WebkitBackgroundClip: 'text', WebkitTextFillColor: 'transparent' }}>Welcome, {user.email}</h2>\n              <p className=\"text-sm\" style={{ color: '#6366f1', fontWeight: 600 }}>Admin Dashboard</p>\n            </div>\n            <div style={{ textAlign: 'right' }}>\n              <button onClick={onLogout} className=\"dashboard-btn bg-red-500\" style={{ fontWeight: 700, fontSize: '1.1rem' }}>Logout</button>\n            </div>\n          </div>\n        </div>\n        {/* Today's Sessions */}\n        <div className=\"dashboard-card\" style={{ background: 'rgba(236,239,255,0.9)', border: '2px solid #6366f1', marginBottom: 24, animation: 'fadeInUp 0.9s cubic-bezier(0.23, 1, 0.32, 1)' }}>\n          <h3 className=\"dashboard-section-title\" style={{ background: 'linear-gradient(90deg,#6366f1 0%,#a5b4fc 100%)', WebkitBackgroundClip: 'text', WebkitTextFillColor: 'transparent' }}>Today's Sessions</h3>\n          {todaySessions.length === 0 ? <p style={{ color: '#888' }}>No sessions today.</p> : (\n            <ul style={{ display: 'flex', flexWrap: 'wrap', gap: 16 }}>\n              {todaySessions.map(s => (\n                <li key={s.id} style={{ background: 'linear-gradient(90deg,#a5b4fc 0%,#6366f1 100%)', color: '#fff', borderRadius: 12, padding: '10px 18px', fontWeight: 600, boxShadow: '0 2px 8px #6366f140', minWidth: 180 }}>\n                  {s.course_name} <span style={{ fontWeight: 400, fontSize: 13 }}>({s.time})</span> <span style={{ fontWeight: 400, fontSize: 13, color: '#fbbf24' }}>by {s.trainer_email || trainers.find(t => t.id === s.trainer_id)?.email || 'Unknown'}</span>\n                </li>\n              ))}\n            </ul>\n          )}\n        </div>\n        {/* Upcoming Sessions */}\n        <div className=\"dashboard-card\" style={{ background: 'rgba(236,239,255,0.9)', border: '2px solid #6366f1', marginBottom: 24, animation: 'fadeInUp 1s cubic-bezier(0.23, 1, 0.32, 1)' }}>\n          <h3 className=\"dashboard-section-title\" style={{ background: 'linear-gradient(90deg,#6366f1 0%,#a5b4fc 100%)', WebkitBackgroundClip: 'text', WebkitTextFillColor: 'transparent' }}>Upcoming Sessions (Next 7 Days)</h3>\n          {upcomingSessions.length === 0 ? <p style={{ color: '#888' }}>No upcoming sessions.</p> : (\n            <ul style={{ display: 'flex', flexWrap: 'wrap', gap: 16 }}>\n              {upcomingSessions.map(s => (\n                <li key={s.id} style={{ background: 'linear-gradient(90deg,#6366f1 0%,#a5b4fc 100%)', color: '#fff', borderRadius: 12, padding: '10px 18px', fontWeight: 600, boxShadow: '0 2px 8px #6366f140', minWidth: 180 }}>\n                  {s.course_name} <span style={{ fontWeight: 400, fontSize: 13 }}>({s.date} {s.time})</span> <span style={{ fontWeight: 400, fontSize: 13, color: '#fbbf24' }}>by {s.trainer_email || trainers.find(t => t.id === s.trainer_id)?.email || 'Unknown'}</span>\n                </li>\n              ))}\n            </ul>\n          )}\n        </div>\n\n        {/* Notifications */}\n        {notifications.length > 0 && (\n          <div className=\"dashboard-card\" style={{ background: 'rgba(236,239,255,0.7)', marginBottom: 16 }}>\n            <h3 className=\"dashboard-section-title\">Trainer Activity Notifications</h3>\n            <ul>\n              {notifications.slice(0, 5).map((n, i) => (\n                <li key={n.id || i} style={{ color: n.type === 'busy' ? '#f87171' : '#6366f1', fontWeight: 600 }}>\n                  {n.message} <span style={{ fontWeight: 400, color: '#888', fontSize: 12 }}>({new Date(n.created_at).toLocaleString()})</span>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n\n        <div className=\"dashboard-card\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h3 className=\"dashboard-section-title\">All Sessions</h3>\n            <button\n              onClick={() => setModalOpen(true)}\n              className=\"dashboard-btn\"\n            >\n              Add Session\n            </button>\n          </div>\n          \n          <input\n            type=\"text\"\n            placeholder=\"Search sessions...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"mb-4 px-3 py-2 border rounded w-full\"\n          />\n\n          <div className=\"overflow-x-auto\">\n            <table className=\"dashboard-table\">\n              <thead>\n                <tr>\n                  <th>Course</th>\n                  <th>Date</th>\n                  <th>Time</th>\n                  <th>Location</th>\n                  <th>Trainer</th>\n                  <th>Scheduled By</th>\n                  <th>Status</th>\n                  <th>Attended</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {paginatedSessions.map((session) => (\n                  <tr key={session.id}>\n                    <td>{session.course_name}</td>\n                    <td>{session.date}</td>\n                    <td>{session.time}</td>\n                    <td>{session.location}</td>\n                    <td>{session.trainer_email || trainers.find(t => t.id === session.trainer_id)?.email || 'Unknown'}</td>\n                    <td>\n                      {session.created_by_trainer ? <span className=\"dashboard-btn bg-yellow-400 text-black\" style={{ fontSize: 12, padding: '2px 8px' }}>Trainer</span> : <span className=\"dashboard-btn bg-blue-200 text-black\" style={{ fontSize: 12, padding: '2px 8px' }}>Admin</span>}\n                    </td>\n                    <td>{session.approval_status || 'approved'}</td>\n                    <td>{session.attended ? 'Yes' : 'No'}</td>\n                    <td>\n                      <button\n                        onClick={() => {\n                          setEditingSession(session);\n                          setModalOpen(true);\n                        }}\n                        className=\"bg-blue-500 text-white px-2 py-1 rounded mr-2\"\n                      >\n                        Edit\n                      </button>\n                      <button\n                        onClick={() => handleDeleteSession(session.id)}\n                        className=\"bg-red-500 text-white px-2 py-1 rounded\"\n                      >\n                        Delete\n                      </button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n\n          <ReactPaginate\n            previousLabel=\"Previous\"\n            nextLabel=\"Next\"\n            pageCount={Math.ceil(filteredSessions.length / itemsPerPage)}\n            onPageChange={({ selected }) => setCurrentPage(selected + 1)}\n            containerClassName=\"flex justify-center mt-4\"\n            pageClassName=\"mx-1\"\n            pageLinkClassName=\"px-3 py-2 border rounded\"\n            activeLinkClassName=\"bg-indigo-500 text-white\"\n            previousClassName=\"mx-1\"\n            nextClassName=\"mx-1\"\n            previousLinkClassName=\"px-3 py-2 border rounded\"\n            nextLinkClassName=\"px-3 py-2 border rounded\"\n          />\n        </div>\n\n        <div className=\"dashboard-card\">\n          <h3 className=\"dashboard-section-title\">Export</h3>\n          <button onClick={exportCSV} className=\"dashboard-btn bg-green-600\">\n            Export CSV\n          </button>\n          <button onClick={exportPDF} className=\"dashboard-btn bg-blue-600\">\n            Export PDF\n          </button>\n        </div>\n\n        <div className=\"dashboard-card\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h3 className=\"dashboard-section-title\">User Management</h3>\n            <button onClick={() => { setUserModalOpen(true); setEditingUser(null); }} className=\"dashboard-btn\">Add User</button>\n          </div>\n          <div className=\"overflow-x-auto\">\n            <table className=\"dashboard-table\">\n              <thead>\n                <tr>\n                  <th className=\"px-4 py-2\">Name</th>\n                  <th className=\"px-4 py-2\">Email</th>\n                  <th className=\"px-4 py-2\">Role</th>\n                  <th className=\"px-4 py-2\">Actions</th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {users.map(u => (\n                  <tr key={u.id}>\n                    <td className=\"px-4 py-2\">{u.name}</td>\n                    <td className=\"px-4 py-2\">{u.email}</td>\n                    <td className=\"px-4 py-2\">{u.role}</td>\n                    <td className=\"px-4 py-2\">\n                      <button onClick={() => { setEditingUser(u); setUserModalOpen(true); }} className=\"bg-blue-500 text-white px-3 py-1 rounded mr-2\">Edit</button>\n                      <button onClick={() => handleDeleteUser(u.id)} className=\"bg-red-500 text-white px-3 py-1 rounded\">Delete</button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n          <UserModal isOpen={userModalOpen} onClose={() => { setUserModalOpen(false); setEditingUser(null); }} onSave={handleSaveUser} userData={editingUser} />\n        </div>\n        {/* Calendar View for Trainer Utilization */}\n        <div className=\"dashboard-card\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h3 className=\"dashboard-section-title\">Trainer Utilization Calendar</h3>\n            <div className=\"flex gap-2 items-center\">\n              <button onClick={() => handleCalendarSourceChange('backend')} className={`dashboard-btn ${calendarSource === 'backend' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}>Show Backend Data</button>\n              <label className=\"dashboard-btn bg-gray-200 cursor-pointer\">\n                <input type=\"file\" accept=\".xlsx,.xls\" onChange={handleExcelUpload} className=\"hidden\" />\n                Upload Excel\n              </label>\n              {excelFileName && <span className=\"text-sm text-gray-600\">{excelFileName} <button onClick={() => handleCalendarSourceChange('backend')} className=\"ml-2 text-red-500\">(Clear)</button></span>}\n            </div>\n          </div>\n          <Calendar\n            localizer={localizer}\n            events={calendarEvents}\n            startAccessor=\"start\"\n            endAccessor=\"end\"\n            style={{ height: 500 }}\n            views={['month', 'week', 'day']}\n            tooltipAccessor={event => event.title}\n            eventPropGetter={event => {\n              const style = {\n                backgroundColor: '#3B82F6',\n                color: 'white',\n                borderRadius: '6px',\n                padding: '4px'\n              };\n              return { style };\n            }}\n          />\n        </div>\n        {/* Trainer Utilization Report */}\n        <div className=\"dashboard-card\">\n          <TrainerUtilization />\n        </div>\n        <SessionModal\n          isOpen={modalOpen}\n          onClose={() => {\n            setModalOpen(false);\n            setEditingSession(null);\n          }}\n          onSave={handleSaveSession}\n          sessionData={editingSession}\n          trainers={trainers}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default AdminDashboard;\nexport { SessionModal, sendEmailNotification };\n\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Trainer-Timetable-App\\client\\src\\App.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Trainer-Timetable-App\\client\\src\\App.test.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":4,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":5},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":5,"column":10,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":5,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":7,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":9}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, screen } from '@testing-library/react';\nimport App from './App';\n\ntest('renders learn react link', () => {\n  render(<App />);\n  const linkElement = screen.getByText(/learn react/i);\n  expect(linkElement).toBeInTheDocument();\n});\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Trainer-Timetable-App\\client\\src\\CalendarView.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'parseISO' is defined but never used.","line":4,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'parseISODate' is defined but never used.","line":6,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":34},{"ruleId":"no-unused-vars","severity":2,"message":"'zonedTimeToUtc' is defined but never used.","line":7,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":24},{"ruleId":"react/prop-types","severity":2,"message":"'token' is missing in props validation","line":12,"column":25,"nodeType":"Property","messageId":"missingPropType","endLine":12,"endColumn":30}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// client/src/CalendarView.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\r\nimport { format, parseISO } from 'date-fns';\r\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\r\nimport { parseISO as parseISODate } from 'date-fns';\r\nimport { zonedTimeToUtc } from 'date-fns-tz';\r\n\r\nimport moment from 'moment';\r\nconst localizer = momentLocalizer(moment);\r\n\r\nfunction CalendarView({ token }) {\r\n    const [events, setEvents] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchSessions() {\r\n            try {\r\n                const res = await fetch('http://localhost:5000/api/sessions', {\r\n                    headers: {\r\n                        'Authorization': `Bearer ${token}`\r\n                    }\r\n                });\r\n\r\n                const data = await res.json();\r\n                const formattedEvents = data.map(session => {\r\n                    const start = new Date(`${session.session_date}T${session.session_time}`);\r\n                    const end = new Date(start.getTime() + 60 * 60 * 1000); // 1 hour duration\r\n                    return {\r\n                        id: session.id,\r\n                        title: `${session.course_name} (${session.location})`,\r\n                        start,\r\n                        end,\r\n                        allDay: false,\r\n                        resource: session\r\n                    };\r\n                });\r\n\r\n                setEvents(formattedEvents);\r\n            } catch (err) {\r\n                console.error('Error loading sessions:', err);\r\n            }\r\n        }\r\n\r\n        fetchSessions();\r\n    }, [token]);\r\n\r\n    // Check if event is today or upcoming\r\n    const isToday = (date) => {\r\n        const today = new Date();\r\n        return date.toDateString() === today.toDateString();\r\n    };\r\n\r\n    return (\r\n        <div className=\"p-4\">\r\n            <h2 className=\"text-2xl font-bold mb-4\">Trainer Schedule</h2>\r\n            <Calendar\r\n                localizer={localizer}\r\n                events={events}\r\n                startAccessor=\"start\"\r\n                endAccessor=\"end\"\r\n                style={{ height: 600 }}\r\n                views={['month', 'week', 'day']}\r\n                tooltipAccessor={(event) => `${event.title} - ${format(event.start, 'PPpp')}`}\r\n                eventPropGetter={(event) => {\r\n                    const style = {\r\n                        backgroundColor: isToday(event.start) ? '#34D399' : '#3B82F6',\r\n                        color: 'white',\r\n                        borderRadius: '6px',\r\n                        padding: '4px'\r\n                    };\r\n                    return { style };\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CalendarView;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Trainer-Timetable-App\\client\\src\\Login.js","messages":[{"ruleId":"react/prop-types","severity":2,"message":"'onLogin' is missing in props validation","line":5,"column":18,"nodeType":"Property","messageId":"missingPropType","endLine":5,"endColumn":25},{"ruleId":"react/prop-types","severity":2,"message":"'onGoToRegister' is missing in props validation","line":5,"column":27,"nodeType":"Property","messageId":"missingPropType","endLine":5,"endColumn":41},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":77,"column":14,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2233,2280],"text":"\r\n          Don&apos;t have an account? \r\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2233,2280],"text":"\r\n          Don&lsquo;t have an account? \r\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2233,2280],"text":"\r\n          Don&#39;t have an account? \r\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2233,2280],"text":"\r\n          Don&rsquo;t have an account? \r\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/Login.js\r\nimport React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nfunction Login({ onLogin, onGoToRegister }) {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleLogin = async () => {\r\n    if (!email || !password) {\r\n      alert('Please fill in all fields');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch('/api/auth/login', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({ error: 'Network error' }));\r\n        throw new Error(errorData.error || `HTTP ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      alert('Login success');\r\n\r\n      // Save token and notify App\r\n      localStorage.setItem('token', data.token);\r\n      if (onLogin) {\r\n        onLogin(data.token);\r\n      }\r\n    } catch (err) {\r\n      alert(`Login failed: ${err.message}`);\r\n      console.error('Login error:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <div className=\"login-form\">\r\n        <h2 className=\"login-title\">Trainer Login</h2>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"email\"\r\n            placeholder=\"Email\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            disabled={loading}\r\n            className=\"form-input\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            disabled={loading}\r\n            className=\"form-input\"\r\n          />\r\n        </div>\r\n        <button \r\n          onClick={handleLogin} \r\n          disabled={loading}\r\n          className=\"login-button\"\r\n        >\r\n          {loading ? 'Logging in...' : 'Login'}\r\n        </button>\r\n        <p className=\"register-link\">\r\n          Don't have an account? \r\n          <button \r\n            onClick={onGoToRegister}\r\n            className=\"register-button\"\r\n          >\r\n            Register\r\n          </button>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Trainer-Timetable-App\\client\\src\\Register.js","messages":[{"ruleId":"react/prop-types","severity":2,"message":"'onRegisterSuccess' is missing in props validation","line":5,"column":21,"nodeType":"Property","messageId":"missingPropType","endLine":5,"endColumn":38},{"ruleId":"react/prop-types","severity":2,"message":"'onGoToLogin' is missing in props validation","line":5,"column":40,"nodeType":"Property","messageId":"missingPropType","endLine":5,"endColumn":51}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/Register.js\r\nimport React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nfunction Register({ onRegisterSuccess, onGoToLogin }) {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [role, setRole] = useState('trainer');\r\n  const [loading, setLoading] = useState(false);\r\n  const [name, setName] = useState('');\r\n\r\n  const handleRegister = async () => {\r\n    if (!email || !password || !name) {\r\n      alert('Please fill in all fields');\r\n      return;\r\n    }\r\n\r\n    if (password.length < 6) {\r\n      alert('Password must be at least 6 characters long');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch('/api/auth/register', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ name, email, password, role }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({ error: 'Network error' }));\r\n        throw new Error(errorData.error || `HTTP ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      alert(data.message);\r\n      \r\n      // Clear form on success\r\n      setEmail('');\r\n      setPassword('');\r\n      setRole('trainer');\r\n      setName('');\r\n      \r\n      // Notify parent component\r\n      if (onRegisterSuccess) {\r\n        onRegisterSuccess();\r\n      }\r\n    } catch (err) {\r\n      alert(`Registration failed: ${err.message}`);\r\n      console.error('Registration error:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"register-container\">\r\n      <div className=\"register-form\">\r\n        <h2 className=\"register-title\">Register</h2>\r\n        <div className=\"form-group\">\r\n          <input \r\n            type=\"text\" \r\n            placeholder=\"Name\" \r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n            disabled={loading}\r\n            className=\"form-input\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input \r\n            type=\"email\" \r\n            placeholder=\"Email\" \r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            disabled={loading}\r\n            className=\"form-input\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input \r\n            type=\"password\" \r\n            placeholder=\"Password\" \r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            disabled={loading}\r\n            className=\"form-input\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <select \r\n            onChange={(e) => setRole(e.target.value)} \r\n            value={role}\r\n            disabled={loading}\r\n            className=\"form-select\"\r\n          >\r\n            <option value=\"trainer\">Trainer</option>\r\n            <option value=\"admin\">Admin</option>\r\n          </select>\r\n        </div>\r\n        <button onClick={handleRegister} disabled={loading} className=\"register-button\">\r\n          {loading ? 'Registering...' : 'Register'}\r\n        </button>\r\n        <p className=\"register-link\">\r\n          Already have an account? \r\n          <button \r\n            onClick={onGoToLogin}\r\n            className=\"login-button\"\r\n          >\r\n            Login\r\n          </button>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Register;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Trainer-Timetable-App\\client\\src\\TestPage.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Trainer-Timetable-App\\client\\src\\TrainerDashboard.js","messages":[{"ruleId":"react/prop-types","severity":2,"message":"'isOpen' is missing in props validation","line":20,"column":25,"nodeType":"Property","messageId":"missingPropType","endLine":20,"endColumn":31},{"ruleId":"react/prop-types","severity":2,"message":"'onClose' is missing in props validation","line":20,"column":33,"nodeType":"Property","messageId":"missingPropType","endLine":20,"endColumn":40},{"ruleId":"react/prop-types","severity":2,"message":"'onSave' is missing in props validation","line":20,"column":42,"nodeType":"Property","messageId":"missingPropType","endLine":20,"endColumn":48},{"ruleId":"react/prop-types","severity":2,"message":"'userData' is missing in props validation","line":20,"column":50,"nodeType":"Property","messageId":"missingPropType","endLine":20,"endColumn":58},{"ruleId":"react/prop-types","severity":2,"message":"'isOpen' is missing in props validation","line":42,"column":26,"nodeType":"Property","messageId":"missingPropType","endLine":42,"endColumn":32},{"ruleId":"react/prop-types","severity":2,"message":"'onClose' is missing in props validation","line":42,"column":34,"nodeType":"Property","messageId":"missingPropType","endLine":42,"endColumn":41},{"ruleId":"react/prop-types","severity":2,"message":"'onSave' is missing in props validation","line":42,"column":43,"nodeType":"Property","messageId":"missingPropType","endLine":42,"endColumn":49},{"ruleId":"react/prop-types","severity":2,"message":"'isOpen' is missing in props validation","line":87,"column":31,"nodeType":"Property","messageId":"missingPropType","endLine":87,"endColumn":37},{"ruleId":"react/prop-types","severity":2,"message":"'onClose' is missing in props validation","line":87,"column":39,"nodeType":"Property","messageId":"missingPropType","endLine":87,"endColumn":46},{"ruleId":"react/prop-types","severity":2,"message":"'onSave' is missing in props validation","line":87,"column":48,"nodeType":"Property","messageId":"missingPropType","endLine":87,"endColumn":54},{"ruleId":"react/prop-types","severity":2,"message":"'defaultTrainerId' is missing in props validation","line":87,"column":56,"nodeType":"Property","messageId":"missingPropType","endLine":87,"endColumn":72},{"ruleId":"react/prop-types","severity":2,"message":"'user' is missing in props validation","line":133,"column":29,"nodeType":"Property","messageId":"missingPropType","endLine":133,"endColumn":33},{"ruleId":"react/prop-types","severity":2,"message":"'onLogout' is missing in props validation","line":133,"column":35,"nodeType":"Property","messageId":"missingPropType","endLine":133,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'setCurrentPage' is assigned a value but never used.","line":139,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":139,"endColumn":37},{"ruleId":"react/prop-types","severity":2,"message":"'user.name' is missing in props validation","line":142,"column":63,"nodeType":"Identifier","messageId":"missingPropType","endLine":142,"endColumn":67},{"ruleId":"react/prop-types","severity":2,"message":"'user.email' is missing in props validation","line":142,"column":87,"nodeType":"Identifier","messageId":"missingPropType","endLine":142,"endColumn":92},{"ruleId":"react/prop-types","severity":2,"message":"'user.id' is missing in props validation","line":166,"column":69,"nodeType":"Identifier","messageId":"missingPropType","endLine":166,"endColumn":71},{"ruleId":"no-unused-vars","severity":2,"message":"'exportCSV' is assigned a value but never used.","line":227,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":227,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'exportPDF' is assigned a value but never used.","line":245,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":245,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":279,"column":55,"nodeType":"Identifier","messageId":"unusedVar","endLine":279,"endColumn":56},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":280,"column":53,"nodeType":"Identifier","messageId":"unusedVar","endLine":280,"endColumn":54},{"ruleId":"no-unused-vars","severity":2,"message":"'eventContent' is assigned a value but never used.","line":290,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":290,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'totalPages' is assigned a value but never used.","line":311,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":311,"endColumn":19},{"ruleId":"react/prop-types","severity":2,"message":"'user.email' is missing in props validation","line":462,"column":222,"nodeType":"Identifier","messageId":"missingPropType","endLine":462,"endColumn":227},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":486,"column":195,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[21680,21696],"text":"Today&apos;s Sessions"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[21680,21696],"text":"Today&lsquo;s Sessions"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[21680,21696],"text":"Today&#39;s Sessions"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[21680,21696],"text":"Today&rsquo;s Sessions"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/prop-types","severity":2,"message":"'user.id' is missing in props validation","line":530,"column":146,"nodeType":"Identifier","messageId":"missingPropType","endLine":530,"endColumn":148}],"suppressedMessages":[],"errorCount":26,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// client/src/TrainerDashboard.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\nimport listPlugin from '@fullcalendar/list';\r\nimport FullCalendar from '@fullcalendar/react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './styles/calendarStyles.css';  // ✅ Correct\r\nimport Modal from 'react-modal';\r\n\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport Papa from 'papaparse';\r\nimport './styles/dashboardStyles.css';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport 'chart.js/auto';\r\n\r\nfunction ProfileModal({ isOpen, onClose, onSave, userData }) {\r\n  const [form, setForm] = useState(userData || { name: '', email: '', password: '' });\r\n  useEffect(() => { setForm(userData || { name: '', email: '', password: '' }); }, [userData, isOpen]);\r\n  if (!isOpen) return null;\r\n  const handleChange = e => { const { name, value } = e.target; setForm(f => ({ ...f, [name]: value })); };\r\n  const handleSubmit = e => { e.preventDefault(); onSave(form); };\r\n  return (\r\n    <Modal isOpen={isOpen} onRequestClose={onClose} ariaHideApp={false} className=\"modal\" overlayClassName=\"modal-overlay\">\r\n      <h2 className=\"text-xl font-bold mb-4\">Edit Profile</h2>\r\n      <form onSubmit={handleSubmit} className=\"space-y-3\">\r\n        <input name=\"name\" value={form.name} onChange={handleChange} placeholder=\"Name\" className=\"w-full border p-2 rounded\" required />\r\n        <input name=\"email\" value={form.email} onChange={handleChange} placeholder=\"Email\" className=\"w-full border p-2 rounded\" required type=\"email\" />\r\n        <input name=\"password\" value={form.password} onChange={handleChange} placeholder=\"New Password (leave blank to keep current)\" className=\"w-full border p-2 rounded\" type=\"password\" minLength={0} />\r\n        <div className=\"flex justify-end gap-2\">\r\n          <button type=\"button\" onClick={onClose} className=\"bg-gray-300 px-4 py-2 rounded\">Cancel</button>\r\n          <button type=\"submit\" className=\"bg-indigo-500 text-white px-4 py-2 rounded\">Save</button>\r\n        </div>\r\n      </form>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nfunction BusySlotModal({ isOpen, onClose, onSave }) {\r\n  const [start, setStart] = useState('');\r\n  const [end, setEnd] = useState('');\r\n  const [reason, setReason] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  useEffect(() => { setStart(''); setEnd(''); setReason(''); setError(''); setLoading(false); }, [isOpen]);\r\n  if (!isOpen) return null;\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError('');\r\n    if (!start || !end) {\r\n      setError('Start and end time are required.');\r\n      return;\r\n    }\r\n    if (new Date(end) <= new Date(start)) {\r\n      setError('End time must be after start time.');\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    try {\r\n      await onSave({ start, end, reason });\r\n    } catch (err) {\r\n      setError(err.message || 'Failed to add busy slot');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  return (\r\n    <Modal isOpen={isOpen} onRequestClose={onClose} ariaHideApp={false} className=\"modal\" overlayClassName=\"modal-overlay\">\r\n      <h2 className=\"text-xl font-bold mb-4\">Add Busy Slot</h2>\r\n      <form onSubmit={handleSubmit} className=\"space-y-3\">\r\n        <input type=\"datetime-local\" value={start} onChange={e => setStart(e.target.value)} className=\"w-full border p-2 rounded\" required />\r\n        <input type=\"datetime-local\" value={end} onChange={e => setEnd(e.target.value)} className=\"w-full border p-2 rounded\" required />\r\n        <input type=\"text\" value={reason} onChange={e => setReason(e.target.value)} placeholder=\"Reason (optional)\" className=\"w-full border p-2 rounded\" />\r\n        {error && <div className=\"text-red-500 text-sm font-semibold\">{error}</div>}\r\n        <div className=\"flex justify-end gap-2\">\r\n          <button type=\"button\" onClick={onClose} className=\"bg-gray-300 px-4 py-2 rounded\">Cancel</button>\r\n          <button type=\"submit\" className=\"bg-indigo-500 text-white px-4 py-2 rounded\" disabled={loading}>{loading ? 'Saving...' : 'Save'}</button>\r\n        </div>\r\n      </form>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nfunction ScheduleClassModal({ isOpen, onClose, onSave, defaultTrainerId }) {\r\n  const [form, setForm] = useState({ course_name: '', date: '', time: '', location: '', duration: 60 });\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  useEffect(() => { setForm({ course_name: '', date: '', time: '', location: '', duration: 60 }); setError(''); setLoading(false); }, [isOpen]);\r\n  if (!isOpen) return null;\r\n  const handleChange = e => setForm(f => ({ ...f, [e.target.name]: e.target.value }));\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError('');\r\n    if (!form.course_name || !form.date || !form.time || !form.location || !form.duration) {\r\n      setError('All fields are required.');\r\n      return;\r\n    }\r\n    if (isNaN(form.duration) || form.duration <= 0) {\r\n      setError('Duration must be a positive number.');\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    try {\r\n      await onSave({ ...form, trainer_id: defaultTrainerId });\r\n    } catch (err) {\r\n      setError(err.message || 'Failed to schedule class');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  return (\r\n    <Modal isOpen={isOpen} onRequestClose={onClose} ariaHideApp={false} className=\"modal\" overlayClassName=\"modal-overlay\">\r\n      <h2 className=\"text-xl font-bold mb-4\">Schedule Class</h2>\r\n      <form onSubmit={handleSubmit} className=\"space-y-3\">\r\n        <input name=\"course_name\" value={form.course_name} onChange={handleChange} placeholder=\"Course Name\" className=\"w-full border p-2 rounded\" required />\r\n        <input name=\"date\" type=\"date\" value={form.date} onChange={handleChange} className=\"w-full border p-2 rounded\" required />\r\n        <input name=\"time\" type=\"time\" value={form.time} onChange={handleChange} className=\"w-full border p-2 rounded\" required />\r\n        <input name=\"location\" value={form.location} onChange={handleChange} placeholder=\"Location\" className=\"w-full border p-2 rounded\" required />\r\n        <input name=\"duration\" type=\"number\" min=\"1\" value={form.duration} onChange={handleChange} className=\"w-full border p-2 rounded\" required />\r\n        {error && <div className=\"text-red-500 text-sm font-semibold\">{error}</div>}\r\n        <div className=\"flex justify-end gap-2\">\r\n          <button type=\"button\" onClick={onClose} className=\"bg-gray-300 px-4 py-2 rounded\">Cancel</button>\r\n          <button type=\"submit\" className=\"bg-indigo-500 text-white px-4 py-2 rounded\" disabled={loading}>{loading ? 'Saving...' : 'Save'}</button>\r\n        </div>\r\n      </form>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nfunction TrainerDashboard({ user, onLogout }) {\r\n  const [events, setEvents] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [attendance, setAttendance] = useState({});\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const rowsPerPage = 5;\r\n  const [profileModalOpen, setProfileModalOpen] = useState(false);\r\n  const [profileData, setProfileData] = useState({ name: user.name || '', email: user.email || '', password: '' });\r\n  const [busyStatus, setBusyStatus] = useState(() => {\r\n    // Default: available, but persist in localStorage\r\n    const stored = localStorage.getItem('busyStatus');\r\n    return stored ? JSON.parse(stored) : { today: false };\r\n  });\r\n  const [busySlots, setBusySlots] = useState([]);\r\n  const [busyModalOpen, setBusyModalOpen] = useState(false);\r\n  const [classModalOpen, setClassModalOpen] = useState(false);\r\n  const [notifications, setNotifications] = useState([]);\r\n\r\n  // Make fetchSessions available for refresh\r\n  const fetchSessions = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        setError('No authentication token found. Please log in again.');\r\n        toast.error('No authentication token found. Please log in again.');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      const res = await axios.get('/api/sessions', {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      const filtered = res.data.filter((s) => s.trainer_id === user.id);\r\n      const mapped = filtered.map((s) => ({\r\n        id: s.id,\r\n        title: `${s.course_name} (${s.location})`,\r\n        start: `${s.date}T${s.time}`,\r\n        course: s.course_name,\r\n        date: s.date,\r\n        time: s.time,\r\n        location: s.location,\r\n        color: s.attended ? '#4caf50' : '#3f51b5',\r\n        extendedProps: { attended: s.attended, approval_status: s.approval_status, created_by_trainer: s.created_by_trainer }\r\n      }));\r\n      setEvents(mapped);\r\n      const attendanceMap = Object.fromEntries(\r\n        filtered.map((s) => [s.id, s.attended])\r\n      );\r\n      setAttendance(attendanceMap);\r\n    } catch (err) {\r\n      console.error('Failed to load sessions:', err);\r\n      let message = 'Failed to load sessions';\r\n      if (err.response && err.response.data && err.response.data.error) {\r\n        message += `: ${err.response.data.error}`;\r\n      }\r\n      setError(message);\r\n      toast.error(message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Replace useEffect for fetching sessions to use fetchSessions\r\n  useEffect(() => {\r\n    fetchSessions();\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    const now = new Date();\r\n    const reminderWindow = new Date(now.getTime() + 30 * 60 * 1000); // next 30 minutes\r\n    const upcomingSessions = events.filter(event => {\r\n      const sessionTime = new Date(event.start);\r\n      return sessionTime > now && sessionTime <= reminderWindow;\r\n    });\r\n    if (upcomingSessions.length > 0) {\r\n      toast.info(`You have ${upcomingSessions.length} session(s) starting soon.`);\r\n    }\r\n  }, [events]);\r\n\r\n  const toggleAttendance = async (sessionId) => {\r\n    const token = localStorage.getItem('token');\r\n    try {\r\n      await axios.patch(`http://localhost:5000/api/sessions/${sessionId}/attendance`, {}, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      setAttendance((prev) => ({ ...prev, [sessionId]: !prev[sessionId] }));\r\n      toast.success('Attendance status updated');\r\n    } catch (err) {\r\n      console.error('Failed to update attendance', err);\r\n      toast.error('Could not update attendance');\r\n    }\r\n  };\r\n\r\n  const exportCSV = () => {\r\n    const csv = Papa.unparse(events.map(e => ({\r\n      Course: e.course,\r\n      Date: e.date,\r\n      Time: e.time,\r\n      Location: e.location,\r\n      Attendance: attendance[e.id] ? 'Attended' : 'Not Attended'\r\n    })));\r\n    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\r\n    const url = URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.setAttribute('download', 'trainer_sessions.csv');\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };\r\n\r\n  const exportPDF = () => {\r\n    const doc = new jsPDF();\r\n    doc.text('Trainer Sessions', 14, 16);\r\n    doc.autoTable({\r\n      startY: 20,\r\n      head: [['Course', 'Date', 'Time', 'Location', 'Attendance']],\r\n      body: events.map(e => [\r\n        e.course,\r\n        e.date,\r\n        e.time,\r\n        e.location,\r\n        attendance[e.id] ? 'Attended' : 'Not Attended'\r\n      ])\r\n    });\r\n    doc.save('trainer_sessions.pdf');\r\n  };\r\n\r\n  const totalSessions = events.length;\r\n  const attendedSessions = Object.values(attendance).filter(Boolean).length;\r\n  const attendancePercentage = totalSessions > 0 ? Math.round((attendedSessions / totalSessions) * 100) : 0;\r\n\r\n  // Calculate busy hours\r\n  const today = new Date();\r\n  const todayStr = today.toISOString().slice(0, 10);\r\n  const weekStart = new Date(today);\r\n  weekStart.setDate(today.getDate() - today.getDay());\r\n  const weekEnd = new Date(weekStart);\r\n  weekEnd.setDate(weekStart.getDate() + 6);\r\n\r\n  const busyEventsToday = events.filter(e => e.date === todayStr);\r\n  const busyEventsWeek = events.filter(e => {\r\n    const d = new Date(e.date);\r\n    return d >= weekStart && d <= weekEnd;\r\n  });\r\n  const busyHoursToday = busyEventsToday.reduce((sum, e) => sum + 1, 0); // 1 hour per event\r\n  const busyHoursWeek = busyEventsWeek.reduce((sum, e) => sum + 1, 0);\r\n\r\n  // Busy toggle handler\r\n  const handleBusyToggle = () => {\r\n    const newStatus = { ...busyStatus, today: !busyStatus.today };\r\n    setBusyStatus(newStatus);\r\n    localStorage.setItem('busyStatus', JSON.stringify(newStatus));\r\n  };\r\n\r\n  // Calendar event styling: highlight busy slots\r\n  const eventContent = (arg) => {\r\n    const isBusy = true; // All events are busy slots\r\n    return (\r\n      <div style={{\r\n        background: isBusy ? 'linear-gradient(90deg,#f87171 0%,#fbbf24 100%)' : '#4caf50',\r\n        color: '#fff',\r\n        borderRadius: 8,\r\n        padding: 4,\r\n        fontWeight: 600,\r\n        boxShadow: isBusy ? '0 2px 8px #fbbf2440' : undefined\r\n      }}>\r\n        {arg.event.title}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const filteredEvents = events.filter((event) =>\r\n    event.title.toLowerCase().includes(searchQuery.toLowerCase())\r\n  );\r\n\r\n  const paginatedEvents = filteredEvents.slice((currentPage - 1) * rowsPerPage, currentPage * rowsPerPage);\r\n  const totalPages = Math.ceil(filteredEvents.length / rowsPerPage);\r\n\r\n  const handleSaveProfile = async (form) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      await axios.put('/api/profile', form, { headers: { Authorization: `Bearer ${token}` } });\r\n      toast.success('Profile updated successfully');\r\n      setProfileModalOpen(false);\r\n      setProfileData({ ...profileData, ...form, password: '' });\r\n    } catch (error) {\r\n      console.error('Error updating profile:', error);\r\n      toast.error('Failed to update profile');\r\n    }\r\n  };\r\n\r\n  // Fetch busy slots\r\n  useEffect(() => {\r\n    const fetchBusySlots = async () => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        const res = await axios.get('/api/busy-slots', { headers: { Authorization: `Bearer ${token}` } });\r\n        setBusySlots(res.data);\r\n      } catch (err) {\r\n        toast.error('Failed to load busy slots');\r\n      }\r\n    };\r\n    fetchBusySlots();\r\n  }, [user]);\r\n\r\n  // Add busy slot\r\n  const handleAddBusySlot = async ({ start, end, reason }) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      await axios.post('/api/busy-slots', { start_time: start, end_time: end, reason }, { headers: { Authorization: `Bearer ${token}` } });\r\n      toast.success('Busy slot added');\r\n      setBusyModalOpen(false);\r\n      setNotifications(n => [...n, { type: 'busy', message: 'Busy slot added.' }]);\r\n      // Refresh busy slots\r\n      const res = await axios.get('/api/busy-slots', { headers: { Authorization: `Bearer ${token}` } });\r\n      setBusySlots(res.data);\r\n    } catch (err) {\r\n      throw new Error(err.response?.data?.error || 'Failed to add busy slot');\r\n    }\r\n  };\r\n  // Remove busy slot\r\n  const handleRemoveBusySlot = async (id) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      await axios.delete(`/api/busy-slots/${id}`, { headers: { Authorization: `Bearer ${token}` } });\r\n      toast.success('Busy slot removed');\r\n      setNotifications(n => [...n, { type: 'busy', message: 'Busy slot removed.' }]);\r\n      setBusySlots(busySlots.filter(b => b.id !== id));\r\n    } catch (err) {\r\n      toast.error('Failed to remove busy slot');\r\n    }\r\n  };\r\n  // Schedule class\r\n  const handleScheduleClass = async (form) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      await axios.post('/api/sessions', { ...form, created_by_trainer: true }, { headers: { Authorization: `Bearer ${token}` } });\r\n      toast.success('Class scheduled (pending approval)');\r\n      setClassModalOpen(false);\r\n      setNotifications(n => [...n, { type: 'session', message: 'Class scheduled.' }]);\r\n      // Refresh sessions so the new class appears in the calendar\r\n      fetchSessions();\r\n    } catch (err) {\r\n      throw new Error(err.response?.data?.error || 'Failed to schedule class');\r\n    }\r\n  };\r\n\r\n  // Merge events and busy slots for calendar\r\n  const calendarEvents = [\r\n    ...events.map(e => ({\r\n      ...e,\r\n      color: e.extendedProps?.approval_status === 'pending' ? '#fbbf24' : (e.extendedProps?.approval_status === 'rejected' ? '#f87171' : '#4caf50'),\r\n      title: `${e.title} (${e.extendedProps?.approval_status || 'approved'})\\n${e.date} ${e.time}`,\r\n      type: 'session',\r\n    })),\r\n    ...busySlots.map(b => ({\r\n      id: `busy-${b.id}`,\r\n      title: b.reason ? `Busy: ${b.reason}` : 'Busy',\r\n      start: b.start_time,\r\n      end: b.end_time,\r\n      color: '#f87171',\r\n      type: 'busy',\r\n    }))\r\n  ];\r\n\r\n  // Analytics data\r\n  const analyticsData = {\r\n    labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\r\n    datasets: [\r\n      {\r\n        label: 'Sessions',\r\n        data: [0, 0, 0, 0, 0, 0, 0],\r\n        backgroundColor: '#6366f1',\r\n      },\r\n      {\r\n        label: 'Busy Slots',\r\n        data: [0, 0, 0, 0, 0, 0, 0],\r\n        backgroundColor: '#f87171',\r\n      }\r\n    ]\r\n  };\r\n  events.forEach(e => {\r\n    const d = new Date(e.date);\r\n    analyticsData.datasets[0].data[d.getDay()]++;\r\n  });\r\n  busySlots.forEach(b => {\r\n    const d = new Date(b.start_time);\r\n    analyticsData.datasets[1].data[d.getDay()]++;\r\n  });\r\n\r\n  function getTodayAndUpcomingSessions(events) {\r\n    const today = new Date();\r\n    const todayStr = today.toISOString().slice(0, 10);\r\n    const upcomingLimit = new Date(today);\r\n    upcomingLimit.setDate(today.getDate() + 7);\r\n    const todaySessions = events.filter(e => e.date === todayStr);\r\n    const upcomingSessions = events.filter(e => {\r\n      const d = new Date(e.date);\r\n      return d > today && d <= upcomingLimit;\r\n    });\r\n    return { todaySessions, upcomingSessions };\r\n  }\r\n\r\n  const { todaySessions, upcomingSessions } = getTodayAndUpcomingSessions(events);\r\n\r\n  if (loading) return <div className=\"text-center p-4\">Loading...</div>;\r\n  if (error) return <div className=\"text-center text-red-500 p-4\">{error}</div>;\r\n\r\n  return (\r\n    <div className=\"dashboard-bg\">\r\n      <div className=\"dashboard-container\">\r\n        <ToastContainer />\r\n        {/* Notifications */}\r\n        {notifications.length > 0 && (\r\n          <div className=\"dashboard-card\" style={{ background: 'rgba(236,239,255,0.7)', marginBottom: 16 }}>\r\n            <h3 className=\"dashboard-section-title\">Notifications</h3>\r\n            <ul>\r\n              {notifications.slice(-5).reverse().map((n, i) => (\r\n                <li key={i} style={{ color: n.type === 'busy' ? '#f87171' : '#6366f1', fontWeight: 600 }}>{n.message}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        )}\r\n        {/* 50x Modern UI: Animated glassmorphism cards, beautiful gradients, elegant badges */}\r\n        <div className=\"dashboard-card\" style={{ background: 'rgba(255,255,255,0.85)', boxShadow: '0 8px 32px 0 rgba(80,112,255,0.18)', border: '2px solid #a5b4fc', marginBottom: 32, animation: 'fadeInUp 0.8s cubic-bezier(0.23, 1, 0.32, 1)' }}>\r\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', gap: 32 }}>\r\n            <div>\r\n              <h2 className=\"dashboard-header\" style={{ fontSize: '2.7rem', background: 'linear-gradient(90deg,#6366f1 0%,#a5b4fc 100%)', WebkitBackgroundClip: 'text', WebkitTextFillColor: 'transparent' }}>Welcome, {user.email}</h2>\r\n              <p className=\"text-sm\" style={{ color: '#6366f1', fontWeight: 600 }}>Trainer Dashboard</p>\r\n              <p className=\"mt-2 font-semibold\" style={{ color: '#6366f1' }}>Attendance: {attendancePercentage}%</p>\r\n            </div>\r\n            <div style={{ textAlign: 'right' }}>\r\n              <button className=\"dashboard-btn bg-red-500\" style={{ marginBottom: 12, fontWeight: 700, fontSize: '1.1rem' }} onClick={onLogout}>Logout</button>\r\n              <div style={{ marginBottom: 10 }}>\r\n                <span className={`dashboard-btn ${busyStatus.today ? 'bg-red-500' : 'bg-green-500'}`} style={{ minWidth: 120, fontWeight: 700, fontSize: '1.1rem' }} onClick={handleBusyToggle}>\r\n                  {busyStatus.today ? 'Busy Today' : 'Available Today'}\r\n                </span>\r\n              </div>\r\n              <div style={{ fontWeight: 600, color: '#5b21b6' }}>\r\n                Busy hours today: <span style={{ color: '#f59e42' }}>{busyHoursToday}</span><br />\r\n                Busy hours this week: <span style={{ color: '#f87171' }}>{busyHoursWeek}</span>\r\n              </div>\r\n              <div style={{ marginTop: 10 }}>\r\n                <button className=\"dashboard-btn\" onClick={() => setBusyModalOpen(true)}>Add Busy Slot</button>\r\n                <button className=\"dashboard-btn\" onClick={() => setClassModalOpen(true)}>Schedule Class</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* Today's Sessions */}\r\n        <div className=\"dashboard-card\" style={{ background: 'rgba(236,239,255,0.9)', border: '2px solid #6366f1', marginBottom: 24, animation: 'fadeInUp 0.9s cubic-bezier(0.23, 1, 0.32, 1)' }}>\r\n          <h3 className=\"dashboard-section-title\" style={{ background: 'linear-gradient(90deg,#6366f1 0%,#a5b4fc 100%)', WebkitBackgroundClip: 'text', WebkitTextFillColor: 'transparent' }}>Today's Sessions</h3>\r\n          {todaySessions.length === 0 ? <p style={{ color: '#888' }}>No sessions today.</p> : (\r\n            <ul style={{ display: 'flex', flexWrap: 'wrap', gap: 16 }}>\r\n              {todaySessions.map(s => (\r\n                <li key={s.id} style={{ background: 'linear-gradient(90deg,#a5b4fc 0%,#6366f1 100%)', color: '#fff', borderRadius: 12, padding: '10px 18px', fontWeight: 600, boxShadow: '0 2px 8px #6366f140', minWidth: 180 }}>\r\n                  {s.course} <span style={{ fontWeight: 400, fontSize: 13 }}>({s.time})</span>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          )}\r\n        </div>\r\n        {/* Upcoming Sessions */}\r\n        <div className=\"dashboard-card\" style={{ background: 'rgba(236,239,255,0.9)', border: '2px solid #6366f1', marginBottom: 24, animation: 'fadeInUp 1s cubic-bezier(0.23, 1, 0.32, 1)' }}>\r\n          <h3 className=\"dashboard-section-title\" style={{ background: 'linear-gradient(90deg,#6366f1 0%,#a5b4fc 100%)', WebkitBackgroundClip: 'text', WebkitTextFillColor: 'transparent' }}>Upcoming Sessions (Next 7 Days)</h3>\r\n          {upcomingSessions.length === 0 ? <p style={{ color: '#888' }}>No upcoming sessions.</p> : (\r\n            <ul style={{ display: 'flex', flexWrap: 'wrap', gap: 16 }}>\r\n              {upcomingSessions.map(s => (\r\n                <li key={s.id} style={{ background: 'linear-gradient(90deg,#6366f1 0%,#a5b4fc 100%)', color: '#fff', borderRadius: 12, padding: '10px 18px', fontWeight: 600, boxShadow: '0 2px 8px #6366f140', minWidth: 180 }}>\r\n                  {s.course} <span style={{ fontWeight: 400, fontSize: 13 }}>({s.date} {s.time})</span>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          )}\r\n        </div>\r\n        {/* Busy Slot List */}\r\n        <div className=\"dashboard-card\">\r\n          <h3 className=\"dashboard-section-title\">Your Busy Slots</h3>\r\n          <ul>\r\n            {busySlots.map(b => (\r\n              <li key={b.id} style={{ marginBottom: 8 }}>\r\n                <span style={{ color: '#f87171', fontWeight: 600 }}>{b.reason || 'Busy'}</span> &mdash; {new Date(b.start_time).toLocaleString()} to {new Date(b.end_time).toLocaleString()}\r\n                <button className=\"dashboard-btn bg-red-500\" style={{ marginLeft: 12 }} onClick={() => handleRemoveBusySlot(b.id)}>Remove</button>\r\n              </li>\r\n            ))}\r\n            {busySlots.length === 0 && <li>No busy slots</li>}\r\n          </ul>\r\n        </div>\r\n        {/* Analytics */}\r\n        <div className=\"dashboard-card\">\r\n          <h3 className=\"dashboard-section-title\">Analytics</h3>\r\n          <Bar data={analyticsData} />\r\n        </div>\r\n        <ProfileModal isOpen={profileModalOpen} onClose={() => setProfileModalOpen(false)} onSave={handleSaveProfile} userData={profileData} />\r\n        <BusySlotModal isOpen={busyModalOpen} onClose={() => setBusyModalOpen(false)} onSave={handleAddBusySlot} />\r\n        <ScheduleClassModal isOpen={classModalOpen} onClose={() => setClassModalOpen(false)} onSave={handleScheduleClass} defaultTrainerId={user.id} />\r\n        <div className=\"dashboard-card\">\r\n          <h3 className=\"dashboard-section-title\">Your Timetable</h3>\r\n          <FullCalendar\r\n            plugins={[dayGridPlugin, timeGridPlugin, listPlugin]}\r\n            initialView=\"timeGridWeek\"\r\n            events={calendarEvents}\r\n            headerToolbar={{\r\n              left: 'prev,next today',\r\n              center: 'title',\r\n              right: 'dayGridMonth,timeGridWeek,listWeek'\r\n            }}\r\n            eventContent={arg => (\r\n              <div style={{\r\n                background: arg.event.extendedProps?.type === 'busy' ? 'linear-gradient(90deg,#f87171 0%,#fbbf24 100%)' : (arg.event.extendedProps?.approval_status === 'pending' ? '#fbbf24' : (arg.event.extendedProps?.approval_status === 'rejected' ? '#f87171' : '#4caf50')),\r\n                color: '#fff',\r\n                borderRadius: 8,\r\n                padding: 4,\r\n                fontWeight: 600,\r\n                boxShadow: '0 2px 8px #fbbf2440',\r\n                border: (new Date(arg.event.start).toDateString() === new Date().toDateString()) ? '2.5px solid #6366f1' : '',\r\n                outline: (new Date(arg.event.start) > new Date() && new Date(arg.event.start) <= new Date(Date.now() + 7*24*60*60*1000)) ? '2.5px dashed #a5b4fc' : ''\r\n              }}>\r\n                {arg.event.title}\r\n              </div>\r\n            )}\r\n          />\r\n        </div>\r\n        <div className=\"dashboard-card\">\r\n          <h3 className=\"dashboard-section-title\">Session List</h3>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search sessions...\"\r\n            value={searchQuery}\r\n            onChange={(e) => setSearchQuery(e.target.value)}\r\n            className=\"mb-4 px-3 py-2 border rounded w-full\"\r\n          />\r\n          <div className=\"overflow-x-auto\">\r\n            <table className=\"dashboard-table\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Course</th>\r\n                  <th>Date</th>\r\n                  <th>Time</th>\r\n                  <th>Location</th>\r\n                  <th>Attendance</th>\r\n                  <th>Status</th>\r\n                  <th>Actions</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {paginatedEvents.map((event) => (\r\n                  <tr key={event.id}>\r\n                    <td>{event.course}</td>\r\n                    <td>{event.date}</td>\r\n                    <td>{event.time}</td>\r\n                    <td>{event.location}</td>\r\n                    <td>{attendance[event.id] ? 'Attended' : 'Not Attended'}</td>\r\n                    <td>{event.extendedProps?.approval_status || 'approved'}</td>\r\n                    <td>\r\n                      <span style={{ fontWeight: 500, color: '#6366f1' }}>\r\n                        {event.extendedProps?.created_by_trainer ? `Scheduled: ${event.date} ${event.time}` : ''}\r\n                      </span>\r\n                      <button onClick={() => toggleAttendance(event.id)} className=\"dashboard-btn\" style={{ marginLeft: 8 }}>\r\n                        Toggle Attendance\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          {/* Pagination, Export Buttons, etc. can be styled similarly */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TrainerDashboard;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Trainer-Timetable-App\\client\\src\\TrainerUtilization.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'trainers' is assigned a value but never used.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'sessions' is assigned a value but never used.","line":11,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":18}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport Papa from 'papaparse';\r\n\r\nfunction TrainerUtilization() {\r\n  const [trainers, setTrainers] = useState([]);\r\n  const [sessions, setSessions] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [utilizationData, setUtilizationData] = useState([]);\r\n  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth());\r\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [currentMonth, currentYear]);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const [trainersRes, sessionsRes] = await Promise.all([\r\n        axios.get('/api/users', {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n        }),\r\n        axios.get('/api/sessions', {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n        })\r\n      ]);\r\n\r\n      const trainerUsers = trainersRes.data.filter(t => t.role === 'trainer');\r\n      setTrainers(trainerUsers);\r\n      setSessions(sessionsRes.data);\r\n      calculateUtilization(trainerUsers, sessionsRes.data);\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n      toast.error('Failed to load utilization data');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const calculateUtilization = (trainerUsers, allSessions) => {\r\n    const monthStart = new Date(currentYear, currentMonth, 1);\r\n    const monthEnd = new Date(currentYear, currentMonth + 1, 0);\r\n    \r\n    const utilization = trainerUsers.map(trainer => {\r\n      // Filter sessions for this trainer in the current month\r\n      const trainerSessions = allSessions.filter(session => \r\n        session.trainer_id === trainer.id &&\r\n        new Date(session.date) >= monthStart &&\r\n        new Date(session.date) <= monthEnd\r\n      );\r\n\r\n      // Calculate statistics\r\n      const totalSessions = trainerSessions.length;\r\n      const attendedSessions = trainerSessions.filter(s => s.attended).length;\r\n      const totalHours = trainerSessions.reduce((sum, session) => {\r\n        const duration = session.duration || 60; // Default 60 minutes\r\n        return sum + (duration / 60); // Convert to hours\r\n      }, 0);\r\n      \r\n      const attendanceRate = totalSessions > 0 ? (attendedSessions / totalSessions * 100).toFixed(1) : 0;\r\n      const averageHoursPerSession = totalSessions > 0 ? (totalHours / totalSessions).toFixed(1) : 0;\r\n      \r\n      // Calculate utilization percentage (assuming 8-hour workday, 22 working days per month)\r\n      const maxPossibleHours = 8 * 22; // 176 hours per month\r\n      const utilizationPercentage = maxPossibleHours > 0 ? (totalHours / maxPossibleHours * 100).toFixed(1) : 0;\r\n\r\n      return {\r\n        id: trainer.id,\r\n        name: trainer.email,\r\n        totalSessions,\r\n        attendedSessions,\r\n        missedSessions: totalSessions - attendedSessions,\r\n        totalHours: totalHours.toFixed(1),\r\n        averageHoursPerSession,\r\n        attendanceRate: `${attendanceRate}%`,\r\n        utilizationPercentage: `${utilizationPercentage}%`,\r\n        status: getUtilizationStatus(utilizationPercentage)\r\n      };\r\n    });\r\n\r\n    setUtilizationData(utilization);\r\n  };\r\n\r\n  const getUtilizationStatus = (utilization) => {\r\n    const util = parseFloat(utilization);\r\n    if (util >= 80) return 'High';\r\n    if (util >= 60) return 'Medium';\r\n    if (util >= 40) return 'Low';\r\n    return 'Very Low';\r\n  };\r\n\r\n  const getStatusColor = (status) => {\r\n    switch (status) {\r\n      case 'High': return 'text-green-600 bg-green-100';\r\n      case 'Medium': return 'text-yellow-600 bg-yellow-100';\r\n      case 'Low': return 'text-orange-600 bg-orange-100';\r\n      case 'Very Low': return 'text-red-600 bg-red-100';\r\n      default: return 'text-gray-600 bg-gray-100';\r\n    }\r\n  };\r\n\r\n  const exportUtilizationCSV = () => {\r\n    const monthName = new Date(currentYear, currentMonth).toLocaleString('default', { month: 'long' });\r\n    const csv = Papa.unparse(utilizationData.map(data => ({\r\n      'Trainer Name': data.name,\r\n      'Total Sessions': data.totalSessions,\r\n      'Attended Sessions': data.attendedSessions,\r\n      'Missed Sessions': data.missedSessions,\r\n      'Total Hours': data.totalHours,\r\n      'Average Hours/Session': data.averageHoursPerSession,\r\n      'Attendance Rate': data.attendanceRate,\r\n      'Utilization Rate': data.utilizationPercentage,\r\n      'Status': data.status\r\n    })));\r\n    \r\n    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\r\n    const url = URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.setAttribute('download', `Trainer_Utilization_${monthName}_${currentYear}.csv`);\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };\r\n\r\n  const exportUtilizationPDF = () => {\r\n    const monthName = new Date(currentYear, currentMonth).toLocaleString('default', { month: 'long' });\r\n    const doc = new jsPDF();\r\n    \r\n    doc.text(`Trainer Utilization Report - ${monthName} ${currentYear}`, 14, 16);\r\n    \r\n    doc.autoTable({\r\n      startY: 25,\r\n      head: [['Trainer', 'Sessions', 'Hours', 'Attendance', 'Utilization', 'Status']],\r\n      body: utilizationData.map(data => [\r\n        data.name,\r\n        `${data.attendedSessions}/${data.totalSessions}`,\r\n        data.totalHours,\r\n        data.attendanceRate,\r\n        data.utilizationPercentage,\r\n        data.status\r\n      ]),\r\n      styles: { fontSize: 8 },\r\n      headStyles: { fillColor: [66, 139, 202] }\r\n    });\r\n    \r\n    doc.save(`Trainer_Utilization_${monthName}_${currentYear}.pdf`);\r\n  };\r\n\r\n  const months = [\r\n    'January', 'February', 'March', 'April', 'May', 'June',\r\n    'July', 'August', 'September', 'October', 'November', 'December'\r\n  ];\r\n\r\n  if (loading) return <div className=\"text-center p-4\">Loading utilization data...</div>;\r\n\r\n  return (\r\n    <div className=\"bg-white p-6 rounded-lg shadow mb-6\">\r\n      <ToastContainer />\r\n      \r\n      {/* Header */}\r\n      <div className=\"flex justify-between items-center mb-6\">\r\n        <div>\r\n          <h3 className=\"text-xl font-semibold\">Trainer Utilization Report</h3>\r\n          <p className=\"text-sm text-gray-600\">\r\n            {months[currentMonth]} {currentYear}\r\n          </p>\r\n        </div>\r\n        \r\n        <div className=\"flex gap-2\">\r\n          <select\r\n            value={currentMonth}\r\n            onChange={(e) => setCurrentMonth(parseInt(e.target.value))}\r\n            className=\"border rounded px-3 py-1\"\r\n          >\r\n            {months.map((month, index) => (\r\n              <option key={index} value={index}>{month}</option>\r\n            ))}\r\n          </select>\r\n          \r\n          <select\r\n            value={currentYear}\r\n            onChange={(e) => setCurrentYear(parseInt(e.target.value))}\r\n            className=\"border rounded px-3 py-1\"\r\n          >\r\n            {[2023, 2024, 2025, 2026].map(year => (\r\n              <option key={year} value={year}>{year}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Export Buttons */}\r\n      <div className=\"mb-4\">\r\n        <button \r\n          onClick={exportUtilizationCSV}\r\n          className=\"bg-green-600 text-white px-4 py-2 rounded mr-2\"\r\n        >\r\n          Export CSV\r\n        </button>\r\n        <button \r\n          onClick={exportUtilizationPDF}\r\n          className=\"bg-blue-600 text-white px-4 py-2 rounded\"\r\n        >\r\n          Export PDF\r\n        </button>\r\n      </div>\r\n\r\n      {/* Utilization Table */}\r\n      <div className=\"overflow-x-auto\">\r\n        <table className=\"min-w-full divide-y divide-gray-200\">\r\n          <thead className=\"bg-gray-50\">\r\n            <tr>\r\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                Trainer Name\r\n              </th>\r\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                Total Sessions\r\n              </th>\r\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                Attended\r\n              </th>\r\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                Missed\r\n              </th>\r\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                Total Hours\r\n              </th>\r\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                Avg Hours/Session\r\n              </th>\r\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                Attendance Rate\r\n              </th>\r\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                Utilization Rate\r\n              </th>\r\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                Status\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody className=\"bg-white divide-y divide-gray-200\">\r\n            {utilizationData.map((trainer) => (\r\n              <tr key={trainer.id} className=\"hover:bg-gray-50\">\r\n                <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n                  {trainer.name}\r\n                </td>\r\n                <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n                  {trainer.totalSessions}\r\n                </td>\r\n                <td className=\"px-4 py-4 whitespace-nowrap text-sm text-green-600 font-medium\">\r\n                  {trainer.attendedSessions}\r\n                </td>\r\n                <td className=\"px-4 py-4 whitespace-nowrap text-sm text-red-600 font-medium\">\r\n                  {trainer.missedSessions}\r\n                </td>\r\n                <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n                  {trainer.totalHours}\r\n                </td>\r\n                <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n                  {trainer.averageHoursPerSession}\r\n                </td>\r\n                <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n                  {trainer.attendanceRate}\r\n                </td>\r\n                <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n                  {trainer.utilizationPercentage}\r\n                </td>\r\n                <td className=\"px-4 py-4 whitespace-nowrap\">\r\n                  <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(trainer.status)}`}>\r\n                    {trainer.status}\r\n                  </span>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      {/* Summary Statistics */}\r\n      {utilizationData.length > 0 && (\r\n        <div className=\"mt-6 grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n          <div className=\"bg-blue-50 p-4 rounded-lg\">\r\n            <h4 className=\"text-sm font-medium text-blue-800\">Total Trainers</h4>\r\n            <p className=\"text-2xl font-bold text-blue-900\">{utilizationData.length}</p>\r\n          </div>\r\n          <div className=\"bg-green-50 p-4 rounded-lg\">\r\n            <h4 className=\"text-sm font-medium text-green-800\">Average Attendance</h4>\r\n            <p className=\"text-2xl font-bold text-green-900\">\r\n              {(utilizationData.reduce((sum, t) => sum + parseFloat(t.attendanceRate), 0) / utilizationData.length).toFixed(1)}%\r\n            </p>\r\n          </div>\r\n          <div className=\"bg-yellow-50 p-4 rounded-lg\">\r\n            <h4 className=\"text-sm font-medium text-yellow-800\">Average Utilization</h4>\r\n            <p className=\"text-2xl font-bold text-yellow-900\">\r\n              {(utilizationData.reduce((sum, t) => sum + parseFloat(t.utilizationPercentage), 0) / utilizationData.length).toFixed(1)}%\r\n            </p>\r\n          </div>\r\n          <div className=\"bg-purple-50 p-4 rounded-lg\">\r\n            <h4 className=\"text-sm font-medium text-purple-800\">Total Sessions</h4>\r\n            <p className=\"text-2xl font-bold text-purple-900\">\r\n              {utilizationData.reduce((sum, t) => sum + t.totalSessions, 0)}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TrainerUtilization; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Trainer-Timetable-App\\client\\src\\index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Trainer-Timetable-App\\client\\src\\reportWebVitals.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Trainer-Timetable-App\\client\\src\\setupTests.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]